% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cross_train_predict.R
\name{cross_train_predict}
\alias{cross_train_predict}
\title{Train and predict out-of-fold so that predictions can be used in
downstream models. Parallelise by calling registerDoMC(n_cores)
before the cross_train_predict call.}
\usage{
cross_train_predict(data, fold_id, train_model, predict_model = predict)
}
\arguments{
\item{data}{any training data format that can be indexed by [i, ]}

\item{fold_id}{integer sequence denoting folds starting at 1}

\item{train_model}{a function with signature data => model}

\item{predict_model}{a function with signature
(model, data) => predictions. Defaults to predict.}
}
\value{
out of fold model predictions
}
\description{
Train and predict out-of-fold so that predictions can be used in
downstream models. Parallelise by calling registerDoMC(n_cores)
before the cross_train_predict call.
}
\examples{
library("xgboost")
library("ggplot2")
library("foreach")
library("doMC")

data(diamonds)

set.seed(1234)
train <- diamonds[order(runif(nrow(diamonds))), ][1:10000, ]

train_model <- function(data) {
  train_mm <- model.matrix(price ~ ., data)
  train_y  <- train$price
  train_dm <- xgb.DMatrix(train_mm, label = data$price)

  xgb.train(params = list(max_depth = 2,
                          subsample = 0.5,
                          eta = 0.1,
                          colsample_bytree = 0.5,
                          objective = "reg:linear"),
            nrounds = 100,
            data = train_dm)
}

predict_model <- function(model, data) {
  score_mm <- model.matrix(price ~ ., data)
  score_dm <- xgb.DMatrix(score_mm)

  predict(model, newdata = score_dm)
}

fold_id <- sample(1:10, nrow(train), TRUE)
ct_preds <- cross_train_predict(train, fold_id, train_model, predict_model)
}

